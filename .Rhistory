# first difference
firstDiff_log = diff(log_fertilityRate, difference = 1)
plot(firstDiff, type = "l", main = "first difference")
# second difference
secDiff_log = diff(log_fertilityRate, difference = 2)
plot(secDiff, type = "l", main = "second difference")
# first difference
#install.packages("tseries")
library(tseries)
adf.test(firstDiff)
adf.test(secDiff)
adf.test(firstDiff_log)
adf.test(secDiff_log)
acf(secDiff)
pacf(secDiff)
acf(firstDiff_log)
pacf(secDiff_log)
searchParams <- function(pList, dList, qList, metric, ts){
bestScore <- 0
bestParams <- c(0,0,0)
metric = metric
for (p in pList){
for (d in dList){
for (q in qList){
params = c(p, d, q)
model = arima(ts, order = params, include.mean = FALSE, method = "ML")
# change AIC() for different metrics
score = metric(model)
if (score < bestScore) {
bestScore = score
bestParams = c(p,d,q)
}
}
}
}
msg <- sprintf("Best Params (p, d, q): %d, %d, %d, with score of %0.3f", bestParams[1], bestParams[2], bestParams[3], bestScore)
print(msg)
}
# test code
# pList = c(0,1,2)
# dList = c(0,1,2)
# qList = c(0,1,2)
#
# searchParams(pList, dList, qList)
# params
pList = c(0:12) #c(0,1,2,5,7,11,12)
dList = c(2)
qList = c(0:13) #c(0,1,11,12,13)
m = AIC
ts = firstDiff_log
# aic model
searchParams(pList, dList, qList, metric = m)
# params
pList = c(0:12) #c(0,1,2,5,7,11,12)
dList = c(2)
qList = c(0:13) #c(0,1,11,12,13)
m = AIC
ts = firstDiff_log
# aic model
searchParams(pList, dList, qList, metric = m, ts)
# params
pList = c(0:12) #c(0,1,2,5,7,11,12)
dList = c(1)
qList = c(0:13) #c(0,1,11,12,13)
m = AIC
ts = firstDiff_log
# aic model
searchParams(pList, dList, qList, metric = m, ts)
# bic model
m = BIC
searchParams(pList, dList, qList, metric = m, ts)
acf(secDiff)
pacf(secDiff)
acf(firstDiff_log)
pacf(firstDiff_log)
acf(secDiff)
pacf(secDiff)
acf(firstDiff_log)
pacf(firstDiff_log)
bestModel = arima(secDiff, order = c(0,1,1), include.mean = FALSE)
acf(bestModel$residual ,col='red')
pacf(bestModel$residual ,col='red')
tsdiag(bestModel)
hist(bestModel$residual,col='darkorange')
qqnorm(bestModel$residual ,col='red')
bestModel = arima(secDiff, order = c(3,1,10), include.mean = FALSE)
acf(bestModel$residual ,col='red')
pacf(bestModel$residual ,col='red')
tsdiag(bestModel)
hist(bestModel$residual,col='darkorange')
qqnorm(bestModel$residual ,col='red')
View(forecasts)
# install.packages("forecast")
library(forecast)
forecasts = forecast(bestModel, h = 5)
actual_forecasts_values = 0
plot(actual_forecasts_values)
View(forecasts)
# install.packages("forecast")
library(forecast)
forecasts = forecast(bestModel, h = 5)
forecasts_orig = firstDiff_log + cumsum(forecasts$mean)
plot(forecasts_orig)
# install.packages("forecast")
library(forecast)
forecasts = forecast(bestModel, h = 5)
forecasts_orig = c(NA, firstDiff_log) + cumsum(forecasts$mean)
plot(forecasts_orig)
View(forecasts)
# log transformation
log_fertilityRate = log(fertilityRate$value)
# first difference
firstDiff_log = diff(log_fertilityRate, difference = 1)
plot(firstDiff_log, type = "l", main = "first difference")
# second difference
secDiff_log = diff(log_fertilityRate, difference = 2)
plot(secDiff_log, type = "l", main = "second difference")
# first difference
#install.packages("tseries")
library(tseries)
adf.test(firstDiff)
adf.test(secDiff)
adf.test(firstDiff_log)
adf.test(secDiff_log)
# log transformation
log_fertilityRate = log(fertilityRate$value)
# first difference
firstDiff_log = diff(log_fertilityRate, difference = 1)
plot(firstDiff_log, type = "l", main = "first difference")
# second difference
secDiff_log = diff(log_fertilityRate, difference = 2)
plot(log(secDiff_log), type = "l", main = "second difference")
# log transformation
log_fertilityRate = log(fertilityRate$value)
# first difference
firstDiff_log = diff(log_fertilityRate, difference = 1)
plot(firstDiff_log, type = "l", main = "first difference")
# second difference
secDiff_log = diff(log_fertilityRate, difference = 2)
plot(secDiff_log, type = "l", main = "second difference")
# params
pList = c(11,12,13)
dList = c(1)
qList = c(12,13)
m = AIC
ts = firstDiff_log
# aic model
searchParams(pList, dList, qList, metric = m, ts)
spec <- spec.pgram(firstDiff_log, taper = 0, log = "no")
plot(spec$freq, spec$spec, type = "l", xlab = "Frequency", ylab = "Periodogram")
spec <- spec.pgram(firstDiff_log, taper = 0, log = "no", spans = 2)
plot(spec$freq, spec$spec, type = "l", xlab = "Frequency", ylab = "Periodogram")
spec <- spec.pgram(firstDiff_log, taper = 0, log = "no", spans = 2)
plot(spec$freq, spec$spec, type = "l", xlab = "Frequency", ylab = "Periodogram")
max_index <- which.max(spec$spec)
max_freq <- spec$freq[max_index]
# Calculate the period
period <- 1/max_freq
searchParamsARIMA <- function(pList, dList, qList, metric, ts){
bestScore <- 0
bestParams <- c(0,0,0)
metric = metric
for (p in pList){
for (d in dList){
for (q in qList){
params = c(p, d, q)
model = arima(ts, order = params, include.mean = FALSE, method = "ML")
# change AIC() for different metrics
score = metric(model)
if (score < bestScore) {
bestScore = score
bestParams = c(p,d,q)
}
}
}
}
msg <- sprintf("Best Params (p, d, q): %d, %d, %d, with score of %0.3f", bestParams[1], bestParams[2], bestParams[3], bestScore)
print(msg)
}
# test code
# pList = c(0,1,2)
# dList = c(0,1,2)
# qList = c(0,1,2)
#
# searchParams(pList, dList, qList)
# read data + EDA
data = read.csv("./data/data.csv")
pwd
# read data + EDA
data = read.csv("./data/data.csv")
plot(x = fertilityRate$year, y = fertilityRate$value, type = "l",
main = "Total Fertility Rate from 1960 to 2018",
xlab = "Per Female",
ylab = "Year")
# read data + EDA
data = read.csv("./data/data.csv")
data = read.csv("./data/data.csv")
# read data + EDA
data = read.csv("../data/data.csv")
data = read.csv("./data/data.csv")
# read data + EDA
data = read.csv("./data/data.csv", header = TRUE)
pwd
data
getwd()
setwd("/Users/cheongkyler/desktop/timeSeries-proj/")
data = read.csv("./data/data.csv", header = TRUE)
# read data + EDA
data = read.csv("./data/data.csv", header = TRUE)
library(ggplot2)
ggplot(data, aes(x = year, y = value, group = level_1, color = level_1)) +
geom_line() +
labs(title = "Line Plot of Three Categories", x = "Year", y = "Value", color = 'Type')
fertilityRate = subset(data, level_1 == "Total Fertility Rate")
fertilityRate = fertilityRate[, c(1,3)]
plot(x = fertilityRate$year, y = fertilityRate$value, type = "l",
main = "Total Fertility Rate from 1960 to 2018",
xlab = "Per Female",
ylab = "Year")
# ACF and PACF of raw data
acf(fertilityRate[, c(2)])
pacf(fertilityRate[, c(2)])
# log transformation
log_fertilityRate = log(fertilityRate$value)
# log first difference
firstDiff_log = diff(log_fertilityRate, difference = 1)
plot(firstDiff_log, type = "l", main = "first difference")
# test stationarity
library(tseries)
adf.test(firstDiff_log)
# ACF and PACF of log firstDiff
acf(firstDiff_log)
pacf(firstDiff_log)
# Periodogram
spec <- spec.pgram(firstDiff_log, taper = 0, log = "no", spans = 2)
plot(spec$freq, spec$spec, type = "l", xlab = "Frequency", ylab = "Periodogram")
max_index <- which.max(spec$spec)
max_freq <- spec$freq[max_index]
period <- 1/max_freq
period
# searchParamsSARIMA
searchParamsSARIMA <- function(pList, dList, qList, PList, DList, QList, sList, metric, ts){
bestScore <- 0
bestParams <- c(0,0,0,0,0,0,0)
metric = metric
for (p in pList){
for (d in dList){
for (q in qList){
for (P in PList){
for (D in DList){
for (Q in QList){
for (s in SList){
params = c(p, d, q)
seasons = c(P, D, Q)
periods = s
sModel = arima(ts, order = params, seasonal = list(order = seasons, period = periods))
score = metric(sModel)
if (score < bestScore) {
bestScore = score
bestParams = c(p,d,q)
bestSeasons = c(P, D, Q)
bestPeriod = s
}
}
}
}
}
}
}
}
msg <- sprintf("Best Params (p, d, q, P, D, Q, s): %d, %d, %d, %d, %d, %d, %d with score of %0.3f",
bestParams[1], bestParams[2], bestParams[3],
bestSeasons[1], bestSeasons[2], bestSeasons[3],
bestPeriod = s,
bestScore)
print(msg)
}
# params
pList = c(11,12,13)
dList = c(1)
qList = c(12,13)
PList = c(11, 12, 13)
DList = c(1)
QList = c(11, 12)
sList = c(3)
m = AIC
ts = firstDiff_log
# aic model
searchParamsSARIMA(pList, dList, qList, PList, DList, QList, sList, metric = m, ts)
# searchParamsSARIMA
searchParamsSARIMA <- function(pList, dList, qList, PList, DList, QList, sList, metric, ts){
bestScore <- 0
bestParams <- c(0,0,0,0,0,0,0)
metric = metric
for (p in pList){
for (d in dList){
for (q in qList){
for (P in PList){
for (D in DList){
for (Q in QList){
for (s in sList){
params = c(p, d, q)
seasons = c(P, D, Q)
periods = s
sModel = arima(ts, order = params, seasonal = list(order = seasons, period = periods))
score = metric(sModel)
if (score < bestScore) {
bestScore = score
bestParams = c(p,d,q)
bestSeasons = c(P, D, Q)
bestPeriod = s
}
}
}
}
}
}
}
}
msg <- sprintf("Best Params (p, d, q, P, D, Q, s): %d, %d, %d, %d, %d, %d, %d with score of %0.3f",
bestParams[1], bestParams[2], bestParams[3],
bestSeasons[1], bestSeasons[2], bestSeasons[3],
bestPeriod = s,
bestScore)
print(msg)
}
# params
pList = c(11,12,13)
dList = c(1)
qList = c(12,13)
PList = c(11, 12, 13)
DList = c(1)
QList = c(11, 12)
sList = c(3)
m = AIC
ts = firstDiff_log
# aic model
searchParamsSARIMA(pList, dList, qList, PList, DList, QList, sList, metric = m, ts)
# searchParamsSARIMA
searchParamsSARIMA <- function(pList, dList, qList, PList, DList, QList, sList, metric, ts){
bestScore <- 0
bestParams <- c(0,0,0,0,0,0,0)
metric = metric
for (p in pList){
for (d in dList){
for (q in qList){
for (P in PList){
for (D in DList){
for (Q in QList){
for (s in sList){
params = c(p, d, q)
seasons = c(P, D, Q)
periods = s
sModel = arima(ts, order = params, seasonal = list(order = seasons, period = periods))
score = metric(sModel)
if (score < bestScore) {
bestScore = score
bestParams = c(p,d,q)
bestSeasons = c(P, D, Q)
bestPeriod = s
}
}
}
}
}
}
}
}
msg <- sprintf("Best Params (p, d, q, P, D, Q, s): %d, %d, %d, %d, %d, %d, %d with score of %0.3f",
bestParams[1], bestParams[2], bestParams[3],
bestSeasons[1], bestSeasons[2], bestSeasons[3],
bestPeriod = s,
bestScore)
print(msg)
}
# params
pList = c(11,12,13)
dList = c(1)
qList = c(12,13)
PList = c(11, 12, 13)
DList = c(1)
QList = c(11, 12)
sList = c(3)
m = AIC
ts = firstDiff_log
# aic model
searchParamsSARIMA(pList, dList, qList, PList, DList, QList, sList, metric = m, ts)
# searchParamsSARIMA
searchParamsSARIMA <- function(pList, dList, qList, PList, DList, QList, sList, metric, ts){
bestScore <- 0
bestParams <- c(0,0,0,0,0,0,0)
metric = metric
for (p in pList){
for (d in dList){
for (q in qList){
for (P in PList){
for (D in DList){
for (Q in QList){
for (s in sList){
params = c(p, d, q)
seasons = c(P, D, Q)
periods = s
sModel = arima(ts, order = params, seasonal = list(order = seasons, period = periods))
score = metric(sModel)
if (score < bestScore) {
bestScore = score
bestParams = c(p,d,q)
bestSeasons = c(P, D, Q)
bestPeriod = s
}
}
}
}
}
}
}
}
msg <- sprintf("Best Params (p, d, q, P, D, Q, s): %d, %d, %d, %d, %d, %d, %d with score of %0.3f",
bestParams[1], bestParams[2], bestParams[3],
bestSeasons[1], bestSeasons[2], bestSeasons[3],
bestPeriod = s,
bestScore)
print(msg)
}
# test code
# params
pList = c(11)
dList = c(1)
qList = c(12)
PList = c(11)
DList = c(1)
QList = c(11)
sList = c(1)
m = AIC
ts = firstDiff_log
# aic model
searchParamsSARIMA(pList, dList, qList, PList, DList, QList, sList, metric = m, ts)
# bic model
m = BIC
searchParamsSARIMA(pList, dList, qList, PList, DList, QList, sList, metric = m, ts)
# searchParamsSARIMA
searchParamsSARIMA <- function(pList, dList, qList, PList, DList, QList, sList, metric, ts){
bestScore <- 0
bestParams <- c(0,0,0,0,0,0,0)
metric = metric
for (p in pList){
for (d in dList){
for (q in qList){
for (P in PList){
for (D in DList){
for (Q in QList){
for (s in sList){
params = c(p, d, q)
seasons = c(P, D, Q)
periods = s
sModel = arima(ts, order = params, seasonal = list(order = seasons, period = periods))
score = metric(sModel)
if (score < bestScore) {
bestScore = score
bestParams = c(p,d,q)
bestSeasons = c(P, D, Q)
bestPeriod = s
}
}
}
}
}
}
}
}
msg <- sprintf("Best Params (p, d, q, P, D, Q, s): %d, %d, %d, %d, %d, %d, %d with score of %0.3f",
bestParams[1], bestParams[2], bestParams[3],
bestSeasons[1], bestSeasons[2], bestSeasons[3],
bestPeriod = s,
bestScore)
print(msg)
}
# test code
# params
pList = c(11, 12, 13)
dList = c(1)
qList = c(12,13)
PList = c(11,12,13)
DList = c(1)
QList = c(12,13)
sList = c(1)
m = AIC
ts = firstDiff_log
# aic model
searchParamsSARIMA(pList, dList, qList, PList, DList, QList, sList, metric = m, ts)
train_fertilityRate = fertilityRate[c(1: length(fertilityRate$year)-10),]
train_fertilityRate = fertilityRate[c(1: length(fertilityRate$year)-10),:]
length(fertilityRate)
length(fertilityRate$year)
train_fertilityRate = fertilityRate[c(1: length(fertilityRate$year)-10),]
train_fertilityRate = fertilityRate[c(1:49),]
test_fertilityRate = fertilityRate[c(length(fertilityRate$year):),]
train_fertilityRate = fertilityRate[c(1:49),]
test_fertilityRate = fertilityRate[c(50:59),]
train_fertilityRate = fertilityRate[c(1:49),]
test_fertilityRate = fertilityRate[c(50:59),]
plot(train_fertilityRate)
plot(test_fertilityRate)
train_fertilityRate = fertilityRate[c(1:49),]
test_fertilityRate = fertilityRate[c(50:59),]
plot(train_fertilityRate, type = "l")
plot(test_fertilityRate, type = "l")
train_fertilityRate = fertilityRate[c(1:49),]
test_fertilityRate = fertilityRate[c(50:59),]
#plot(train_fertilityRate, type = "l")
#plot(test_fertilityRate, type = "l")
View(test_fertilityRate)
